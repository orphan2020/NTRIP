#include <WiFi.h>
#include <WebServer.h>
#include <Preferences.h>

// Preferences for storing WiFi credentials
Preferences preferences;
WebServer server(80);

// Configuration variables
String apSSID = "ESP32C6-Config";
String staSSID = "iPhone15";
String staPassword = "sommer2022";

// Connection tracking
unsigned long connectionStartTime = 0;
bool isConnected = false;
bool shouldSaveConfig = false;

void setup() {
Serial.begin(115200);

// Initialize preferences
preferences.begin("wifi-config", false);

// Load saved credentials if they exist
staSSID = preferences.getString("ssid", "iPhone15");
staPassword = preferences.getString("password", "sommer2022");

// Start both AP and STA modes
WiFi.mode(WIFI_MODE_APSTA);
setupAP();
connectToSTA();

// Setup web server
server.on("/", handleRoot);
server.on("/config", handleConfig);
server.on("/save", handleSave);
server.on("/status", handleStatus);
server.begin();

// Start captive portal redirect
server.onNotFound([]() {
if (isCaptivePortal()) {
server.sendHeader("Location", "http://" + WiFi.softAPIP().toString(), true);
server.send(302, "text/plain", "");
} else {
server.send(404, "text/plain", "Not found");
}
});
}

void loop() {
server.handleClient();

// Maintain WiFi connection
if (WiFi.status() != WL_CONNECTED) {
if (isConnected) {
Serial.println("Connection lost");
isConnected = false;
}
connectToSTA();
} else if (!isConnected) {
Serial.println("Connected successfully");
isConnected = true;
connectionStartTime = millis();
}
}

void setupAP() {
WiFi.softAP(apSSID.c_str());
Serial.println("AP started");
Serial.print("AP IP address: ");
Serial.println(WiFi.softAPIP());
}

void connectToSTA() {
if (WiFi.status() == WL_CONNECTED) return;

Serial.println("Connecting to WiFi...");
WiFi.begin(staSSID.c_str(), staPassword.c_str());

unsigned long startAttemptTime = millis();
while (WiFi.status() != WL_CONNECTED &&
millis() - startAttemptTime < 10000) {
delay(500);
Serial.print(".");
}
Serial.println();
}

bool isCaptivePortal() {
return WiFi.softAPgetStationNum() > 0 &&
server.hostHeader() != WiFi.softAPIP().toString();
}

String getUptime() {
if (!isConnected) return "Not connected";
unsigned long uptime = (millis() - connectionStartTime) / 1000;
int hours = uptime / 3600;
int minutes = (uptime % 3600) / 60;
int seconds = uptime % 60;

char buffer[20];
snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
return String(buffer);
}

void handleRoot() {
String html = R"(
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>ESP32C6 Status</title>
<style>
body { font-family: Arial, sans-serif; margin: 20px; }
.card { background: #f9f9f9; padding: 20px; border-radius: 10px; margin: 10px 0; }
.status { color: )" + String(isConnected ? "#2ecc71" : "#e74c3c") + R"(; }
</style>
</head>
<body>
<h1>ESP32C6 Status</h1>

<div class="card">
<h2>Connection Status</h2>
<p>SSID: )" + staSSID + R"(</p>
<p>Status: <span class="status">)" + String(isConnected ? "Connected" : "Disconnected") + R"(</span></p>
<p>Uptime: )" + getUptime() + R"(</p>
<p>STA IP: )" + WiFi.localIP().toString() + R"(</p>
<p>AP IP: )" + WiFi.softAPIP().toString() + R"(</p>
</div>

<a href="/config"><button>Configure WiFi</button></a>
<a href="/status"><button>Refresh Status</button></a>
</body>
</html>
)";
server.send(200, "text/html", html);
}

void handleConfig() {
String html = R"(
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>WiFi Configuration</title>
<style>
body { font-family: Arial, sans-serif; margin: 20px; }
input { margin: 10px 0; padding: 10px; width: 100%; }
button { padding: 10px 20px; }
</style>
</head>
<body>
<h1>WiFi Configuration</h1>
<form action="/save" method="POST">
<label>SSID:</label>
<input type="text" name="ssid" value=")" + staSSID + R"(">
<label>Password:</label>
<input type="password" name="password" value=")" + staPassword + R"(">
<button type="submit">Save</button>
</form>
<br>
<a href="/"><button>Back to Status</button></a>
</body>
</html>
)";
server.send(200, "text/html", html);
}

void handleSave() {
if (server.hasArg("ssid") && server.hasArg("password")) {
staSSID = server.arg("ssid");
staPassword = server.arg("password");

preferences.putString("ssid", staSSID);
preferences.putString("password", staPassword);

Serial.println("Credentials saved");
server.sendHeader("Location", "/");
server.send(303);
}
}

void handleStatus() {
String json = "{";
json += "\"connected\":" + String(isConnected ? "true" : "false") + ",";
json += "\"ssid\":\"" + staSSID + "\",";
json += "\"uptime\":\"" + getUptime() + "\",";
json += "\"sta_ip\":\"" + WiFi.localIP().toString() + "\",";
json += "\"ap_ip\":\"" + WiFi.softAPIP().toString() + "\"";
json += "}";

server.send(200, "application/json", json);
}

