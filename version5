#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <HTTPClient.h>
#include <WebServer.h>
#include <Update.h>
#include <Preferences.h>
#include <ArduinoJson.h>
#include <base64.h>

// =========================
// Defaults & Constants
// =========================
#define DEFAULT_AP_SSID "Ardusimple-NTRIP"
#define DEFAULT_AP_PASSWORD "password"
#define DEFAULT_BAUD_RATE 115200
#define DEFAULT_SERIAL_TIMEOUT 1500
#define DEFAULT_NTRIP_TIMEOUT 10000

#define STATUS_LED LED_BUILTIN
#define BUTTON_PIN 0 // Boot button on most ESP32 dev boards

WebServer server(80);
Preferences preferences;
WiFiClient ntripClient;
HardwareSerial &gnssSerial = Serial1; // Using Serial1 for GNSS communication

// =========================
// Config Structure
// =========================
struct Config {
  String wifiSsid;
  String wifiPassword;
  String ntripHost;
  int ntripPort;
  String ntripUser;
  String ntripPassword;
  String ntripMountpoint;

  // UART Settings
  int uartController; // 0, 1, 2
  int txPin;
  int rxPin;
  int baudRate;
  int dataBits;   // 5, 6, 7, 8
  int stopBits;   // 1, 2
  int parity;     // 0=None, 1=Odd, 2=Even
  int rtsPin;
  int ctsPin;
  bool flowControl;

  bool enableBluetooth;
};

Config config;

// =========================
// Function Declarations
// =========================
void loadConfig();
void saveConfig();
void connectToWiFi();
void startConfigAP();
void connectToNtrip();
void setupWebServer();
String parityToString(int parity);
String wifiStatusToString();

// =========================
// Setup
// =========================
void setup() {
  pinMode(STATUS_LED, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  digitalWrite(STATUS_LED, LOW);

  Serial.begin(115200);
  loadConfig();

  // Init GNSS Serial
  gnssSerial.begin(config.baudRate, SERIAL_8N1, config.rxPin, config.txPin);

  connectToWiFi();
  setupWebServer();

  if (digitalRead(BUTTON_PIN) == LOW) {
    startConfigAP();
  }

  if (WiFi.status() == WL_CONNECTED) {
    connectToNtrip();
  }
}

// =========================
// Loop
// =========================
void loop() {
  server.handleClient();

  if (ntripClient.connected()) {
    digitalWrite(STATUS_LED, HIGH);

    while (ntripClient.available()) {
      char c = ntripClient.read();
      gnssSerial.write(c);
    }
    while (gnssSerial.available()) {
      char c = gnssSerial.read();
      ntripClient.write(c);
    }
  } else {
    digitalWrite(STATUS_LED, LOW);
    if (WiFi.status() == WL_CONNECTED) {
      static unsigned long lastReconnect = 0;
      if (millis() - lastReconnect > 30000) {
        connectToNtrip();
        lastReconnect = millis();
      }
    }
  }

  if (WiFi.status() != WL_CONNECTED) {
    static unsigned long lastWifiReconnect = 0;
    if (millis() - lastWifiReconnect > 30000) {
      connectToWiFi();
      lastWifiReconnect = millis();
    }
  }

  if (WiFi.getMode() == WIFI_AP) {
    static unsigned long lastBlink = 0;
    if (millis() - lastBlink > 500) {
      digitalWrite(STATUS_LED, !digitalRead(STATUS_LED));
      lastBlink = millis();
    }
  }
}

// =========================
// Config Handling
// =========================
void loadConfig() {
  preferences.begin("ntrip-config", true);

  config.wifiSsid = preferences.getString("wifiSsid", "");
  config.wifiPassword = preferences.getString("wifiPassword", "");
  config.ntripHost = preferences.getString("ntripHost", "");
  config.ntripPort = preferences.getInt("ntripPort", 2101);
  config.ntripUser = preferences.getString("ntripUser", "");
  config.ntripPassword = preferences.getString("ntripPassword", "");
  config.ntripMountpoint = preferences.getString("ntripMountpoint", "");

  config.uartController = preferences.getInt("uartController", 1);
  config.txPin = preferences.getInt("txPin", 17);
  config.rxPin = preferences.getInt("rxPin", 18);
  config.baudRate = preferences.getInt("baudRate", DEFAULT_BAUD_RATE);
  config.dataBits = preferences.getInt("dataBits", 8);
  config.stopBits = preferences.getInt("stopBits", 1);
  config.parity = preferences.getInt("parity", 0);
  config.rtsPin = preferences.getInt("rtsPin", -1);
  config.ctsPin = preferences.getInt("ctsPin", -1);
  config.flowControl = preferences.getBool("flowControl", false);

  config.enableBluetooth = preferences.getBool("enableBT", false);

  preferences.end();
}

void saveConfig() {
  preferences.begin("ntrip-config", false);

  preferences.putString("wifiSsid", config.wifiSsid);
  preferences.putString("wifiPassword", config.wifiPassword);
  preferences.putString("ntripHost", config.ntripHost);
  preferences.putInt("ntripPort", config.ntripPort);
  preferences.putString("ntripUser", config.ntripUser);
  preferences.putString("ntripPassword", config.ntripPassword);
  preferences.putString("ntripMountpoint", config.ntripMountpoint);

  preferences.putInt("uartController", config.uartController);
  preferences.putInt("txPin", config.txPin);
  preferences.putInt("rxPin", config.rxPin);
  preferences.putInt("baudRate", config.baudRate);
  preferences.putInt("dataBits", config.dataBits);
  preferences.putInt("stopBits", config.stopBits);
  preferences.putInt("parity", config.parity);
  preferences.putInt("rtsPin", config.rtsPin);
  preferences.putInt("ctsPin", config.ctsPin);
  preferences.putBool("flowControl", config.flowControl);

  preferences.putBool("enableBT", config.enableBluetooth);

  preferences.end();
}

// =========================
// WiFi / NTRIP
// =========================
void connectToWiFi() {
  if (config.wifiSsid == "") {
    startConfigAP();
    return;
  }

  WiFi.mode(WIFI_STA);
  WiFi.begin(config.wifiSsid.c_str(), config.wifiPassword.c_str());

  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 10000) {
    delay(500);
  }

  if (WiFi.status() != WL_CONNECTED) {
    startConfigAP();
  }
}

void startConfigAP() {
  WiFi.mode(WIFI_AP);
  WiFi.softAP(DEFAULT_AP_SSID, DEFAULT_AP_PASSWORD);
}

void connectToNtrip() {
  if (config.ntripHost == "" || config.ntripMountpoint == "") return;

  if (!ntripClient.connect(config.ntripHost.c_str(), config.ntripPort)) {
    return;
  }

  String request = String("GET /") + config.ntripMountpoint + " HTTP/1.1\r\n" +
                   "Host: " + config.ntripHost + "\r\n" +
                   "Ntrip-Version: Ntrip/2.0\r\n" +
                   "User-Agent: NTRIP Ardusimple/1.0\r\n";

  if (config.ntripUser != "") {
    String auth = config.ntripUser + ":" + config.ntripPassword;
    String authBase64 = base64::encode(auth);
    request += "Authorization: Basic " + authBase64 + "\r\n";
  }

  request += "Connection: close\r\n\r\n";
  ntripClient.print(request);
}

// =========================
// Helper Functions
// =========================
String parityToString(int parity) {
  if (parity == 1) return "Odd";
  if (parity == 2) return "Even";
  return "None";
}

String wifiStatusToString() {
  switch (WiFi.status()) {
    case WL_CONNECTED: return "Connected";
    case WL_NO_SSID_AVAIL: return "No SSID Available";
    case WL_CONNECT_FAILED: return "Connection Failed";
    case WL_IDLE_STATUS: return "Idle";
    default: return "Disconnected";
  }
}

// =========================
// Web Server
// =========================
void setupWebServer() {
  // Config Page
  server.on("/", HTTP_GET, []() {
    String html = R"=====( 
<!DOCTYPE html>
<html>
<head>
<title>ESP32 NTRIP Config</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body { font-family: Arial; margin:20px; }
.section { padding:10px; border:1px solid #ccc; margin-bottom:15px; border-radius:5px; }
h2 { margin-top:0; }
input,select { width:100%; padding:8px; margin:5px 0; }
button { padding:10px; background:#4CAF50; color:white; border:none; cursor:pointer; }
button:hover { background:#45a049; }
a { margin-right:15px; }
</style>
</head>
<body>
<h1>ESP32 NTRIP Master</h1>
<nav><a href="/">Configuration</a> | <a href="/status">Status</a></nav>

<div class="section">
<h2>WiFi</h2>
<input type="text" id="wifiSsid" placeholder="SSID">
<input type="password" id="wifiPassword" placeholder="Password">
</div>

<div class="section">
<h2>NTRIP</h2>
<input type="text" id="ntripHost" placeholder="Host">
<input type="number" id="ntripPort" value="2101">
<input type="text" id="ntripUser" placeholder="User">
<input type="password" id="ntripPassword" placeholder="Password">
<input type="text" id="ntripMountpoint" placeholder="Mountpoint">
</div>

<div class="section">
<h2>UART</h2>
<label>Controller</label>
<select id="uartController">
<option value="0">UART0</option>
<option value="1">UART1</option>
<option value="2">UART2</option>
</select>
<label>TX Pin</label><input type="number" id="txPin">
<label>RX Pin</label><input type="number" id="rxPin">
<label>Baud Rate</label><input type="number" id="baudRate">
<label>Data Bits</label><select id="dataBits">
<option value="5">5</option><option value="6">6</option>
<option value="7">7</option><option value="8">8</option></select>
<label>Stop Bits</label><select id="stopBits">
<option value="1">1</option><option value="2">2</option></select>
<label>Parity</label><select id="parity">
<option value="0">None</option><option value="1">Odd</option><option value="2">Even</option></select>
<label>RTS Pin</label><input type="number" id="rtsPin">
<label>CTS Pin</label><input type="number" id="ctsPin">
<label>Flow Control</label><input type="checkbox" id="flowControl">
</div>

<button onclick="saveConfig()">Save</button>
<button onclick="resetConfig()">Reset</button>

<script>
function saveConfig(){
 const config={
  wifiSsid:document.getElementById('wifiSsid').value,
  wifiPassword:document.getElementById('wifiPassword').value,
  ntripHost:document.getElementById('ntripHost').value,
  ntripPort:document.getElementById('ntripPort').value,
  ntripUser:document.getElementById('ntripUser').value,
  ntripPassword:document.getElementById('ntripPassword').value,
  ntripMountpoint:document.getElementById('ntripMountpoint').value,
  uartController:parseInt(document.getElementById('uartController').value),
  txPin:parseInt(document.getElementById('txPin').value),
  rxPin:parseInt(document.getElementById('rxPin').value),
  baudRate:parseInt(document.getElementById('baudRate').value),
  dataBits:parseInt(document.getElementById('dataBits').value),
  stopBits:parseInt(document.getElementById('stopBits').value),
  parity:parseInt(document.getElementById('parity').value),
  rtsPin:parseInt(document.getElementById('rtsPin').value),
  ctsPin:parseInt(document.getElementById('ctsPin').value),
  flowControl:document.getElementById('flowControl').checked
 };
 fetch('/config',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(config)})
 .then(r=>{alert("Saved! Restarting...");setTimeout(()=>location.reload(),2000);});
}
function resetConfig(){
 if(confirm("Reset to defaults?")) fetch('/reset',{method:'POST'}).then(r=>{alert("Reset! Restarting...");setTimeout(()=>location.reload(),2000);});
}
fetch('/config').then(r=>r.json()).then(cfg=>{
 document.getElementById('wifiSsid').value=cfg.wifiSsid||"";
 document.getElementById('ntripHost').value=cfg.ntripHost||"";
 document.getElementById('ntripPort').value=cfg.ntripPort||2101;
 document.getElementById('ntripUser').value=cfg.ntripUser||"";
 document.getElementById('ntripMountpoint').value=cfg.ntripMountpoint||"";
 document.getElementById('baudRate').value=cfg.baudRate||115200;
 document.getElementById('txPin').value=cfg.txPin||17;
 document.getElementById('rxPin').value=cfg.rxPin||18;
 document.getElementById('uartController').value=cfg.uartController||1;
 document.getElementById('dataBits').value=cfg.dataBits||8;
 document.getElementById('stopBits').value=cfg.stopBits||1;
 document.getElementById('parity').value=cfg.parity||0;
 document.getElementById('rtsPin').value=cfg.rtsPin||-1;
 document.getElementById('ctsPin').value=cfg.ctsPin||-1;
 document.getElementById('flowControl').checked=cfg.flowControl||false;
});
</script>
</body>
</html>
)=====";
    server.send(200, "text/html", html);
  });

  // Config API
  server.on("/config", HTTP_GET, []() {
    DynamicJsonDocument doc(1024);
    doc["wifiSsid"] = config.wifiSsid;
    doc["ntripHost"] = config.ntripHost;
    doc["ntripPort"] = config.ntripPort;
    doc["ntripUser"] = config.ntripUser;
    doc["ntripMountpoint"] = config.ntripMountpoint;
    doc["baudRate"] = config.baudRate;
    doc["txPin"] = config.txPin;
    doc["rxPin"] = config.rxPin;
    doc["uartController"] = config.uartController;
    doc["dataBits"] = config.dataBits;
    doc["stopBits"] = config.stopBits;
    doc["parity"] = config.parity;
    doc["rtsPin"] = config.rtsPin;
    doc["ctsPin"] = config.ctsPin;
    doc["flowControl"] = config.flowControl;

    String response;
    serializeJson(doc, response);
    server.send(200, "application/json", response);
  });

  server.on("/config", HTTP_POST, []() {
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, server.arg("plain"));

    config.wifiSsid = doc["wifiSsid"].as<String>();
    config.wifiPassword = doc["wifiPassword"].as<String>();
    config.ntripHost = doc["ntripHost"].as<String>();
    config.ntripPort = doc["ntripPort"].as<int>();
    config.ntripUser = doc["ntripUser"].as<String>();
    config.ntripPassword = doc["ntripPassword"].as<String>();
    config.ntripMountpoint = doc["ntripMountpoint"].as<String>();

    config.uartController = doc["uartController"].as<int>();
    config.txPin = doc["txPin"].as<int>();
    config.rxPin = doc["rxPin"].as<int>();
    config.baudRate = doc["baudRate"].as<int>();
    config.dataBits = doc["dataBits"].as<int>();
    config.stopBits = doc["stopBits"].as<int>();
    config.parity = doc["parity"].as<int>();
    config.rtsPin = doc["rtsPin"].as<int>();
    config.ctsPin = doc["ctsPin"].as<int>();
    config.flowControl = doc["flowControl"].as<bool>();

    saveConfig();
    server.send(200, "text/plain", "OK");
    delay(1000);
    ESP.restart();
  });

  server.on("/reset", HTTP_POST, []() {
    preferences.begin("ntrip-config", false);
    preferences.clear();
    preferences.end();
    server.send(200, "text/plain", "OK");
    delay(1000);
    ESP.restart();
  });

  // Status Page
  server.on("/status", HTTP_GET, []() {
    String html = "<!DOCTYPE html><html><head><title>Status</title><style>body{font-family:Arial;margin:20px;}table{border-collapse:collapse;}td,th{border:1px solid #ccc;padding:8px;}</style></head><body>";
    html += "<h1>System Status</h1><nav><a href='/'>Configuration</a> | <a href='/status'>Status</a></nav>";

    html += "<h2>WiFi</h2><table>";
    html += "<tr><th>Status</th><td>" + wifiStatusToString() + "</td></tr>";
    if (WiFi.status() == WL_CONNECTED) {
      html += "<tr><th>SSID</th><td>" + WiFi.SSID() + "</td></tr>";
      html += "<tr><th>IP</th><td>" + WiFi.localIP().toString() + "</td></tr>";
    }
    html += "</table>";

    html += "<h2>NTRIP</h2><table>";
    html += "<tr><th>Host</th><td>" + config.ntripHost + "</td></tr>";
    html += "<tr><th>Port</th><td>" + String(config.ntripPort) + "</td></tr>";
    html += "<tr><th>Mountpoint</th><td>" + config.ntripMountpoint + "</td></tr>";
    html += "<tr><th>Status</th><td>" + String(ntripClient.connected() ? "Connected" : "Disconnected") + "</td></tr>";
    html += "</table>";

    html += "<h2>UART</h2><table>";
    html += "<tr><th>Controller</th><td>" + String(config.uartController) + "</td></tr>";
    html += "<tr><th>TX Pin</th><td>" + String(config.txPin) + "</td></tr>";
    html += "<tr><th>RX Pin</th><td>" + String(config.rxPin) + "</td></tr>";
    html += "<tr><th>Baud</th><td>" + String(config.baudRate) + "</td></tr>";
    html += "<tr><th>Data Bits</th><td>" + String(config.dataBits) + "</td></tr>";
    html += "<tr><th>Stop Bits</th><td>" + String(config.stopBits) + "</td></tr>";
    html += "<tr><th>Parity</th><td>" + parityToString(config.parity) + "</td></tr>";
    html += "<tr><th>Flow Control</th><td>" + String(config.flowControl ? "Enabled" : "Disabled") + "</td></tr>";
    html += "</table>";

    html += "</body></html>";

    server.send(200, "text/html", html);
  });

  server.begin();
}

